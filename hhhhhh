getgenv().KiTTYWARE = {
    autoPrepare = {
        Usernames = {
            "av97wteiQej7nREVJ",
            "yuI4br8rOI",
            "735kLj0keE",
            "ooK85L1ksi",
            "6ovXvlxHOg",
            "nnnzXrj8Be",
            "wSrybynmiP",
            "3p2enndNtY",
            "0oWX2pPx3A",
            "jvUpcwISpU",
            "uCS6DkXfS7",
            "CDg0EtuxjL",
            "M2knbI8Tna",
            "QSNUX2Udu0",
            "5TvP4GoYbW",
            "Y8KB87NKjQ",
            "epWFHfqEOC",
            "COdsp01ZoQ",
            "U7fR4hoBv5",
            "qpz8oViuuV",
            "XSlt7Nrp10",
            "wisiLhkgxK",
            "pJ3QOTJnJ0",
            "UcfctXXUFY",
            "hBfmpOVxBc",
            "4GryUENOp3",
            "04ntwk8E3Y",
            "pVYle3YPkP",
            "akkOcdQENh",
            "YN21YceXbU",
            
            --more user etc
        },
        mailConfig = {
            {Class = "Currency", Name = "Diamonds", Tier = nil, Shiny = false, Amount = 100000},
        },
    }
}
repeat task.wait(.5) until game.PlaceId ~= nil
repeat task.wait(.5) until game:GetService("Players") and game:GetService("Players").LocalPlayer
repeat task.wait(.5) until not game.Players.LocalPlayer.PlayerGui:FindFirstChild("__INTRO")

local Player = game:GetService("Players").LocalPlayer
local RepStor = game:GetService("ReplicatedStorage")
local Library = require(RepStor.Library)
local saveMod = require(RepStor.Library.Client.Save)

function Info(name) return saveMod.Get()[name] end 
function getDiamonds() return Player.leaderstats["ðŸ’Ž Diamonds"].Value end

for Index,User in pairs(getgenv().KiTTYWARE.autoPrepare.Usernames) do
    for _,Current in pairs(getgenv().KiTTYWARE.autoPrepare.mailConfig) do
        if getDiamonds() >= 10000 then -- has enough to mail check
            for ID,itemTable in pairs(Info("Inventory")[Current.Class]) do
                -- item name check
                if itemTable.id == Current.Name then
                    -- item tier/type checks
                    if (not itemTable.sh or itemTable.sh and Current.Shiny) then
                        if (not itemTable.pt or itemTable.tn and not Current.Tier) or
                            (itemTable.pt and itemTable.pt == Current.Tier) or
                            (itemTable.tn and itemTable.tn == Current.Tier) then
                            -- item amount checks
                            if (not itemTable._am and Current.Amount == 1) or 
                                (itemTable._am and itemTable._am >= Current.Amount) then
                                warn("Found:",itemTable.id, (itemTable.tn or itemTable.pt), itemTable._am)
                                repeat local success = Library.Network.Invoke("Mailbox: Send", User, "i<3Kittys", Current.Class, ID, Current.Amount)
                                until success
                                print("Sent",Current.Amount, Current.Name,"to",User)
                            end
                        end
                    end
                end
            end
        end
    end
end
